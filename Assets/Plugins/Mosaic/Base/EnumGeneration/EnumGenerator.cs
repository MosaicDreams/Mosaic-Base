using System;
using System.Collections.Generic;
using System.Linq;

namespace Mosaic.Base.EnumGeneration
{
	//Generated by Chat-GPT
	public static class EnumGenerator
	{
		private static string SanitizeEnumIdentifier(string name)
		{
			// Remove invalid characters and make the first character uppercase
			string identifier = string.Join("", name
				.Where(char.IsLetterOrDigit)
				.Select((c, i) => i == 0 ? char.ToUpper(c) : char.ToLower(c)));

			// Ensure the identifier starts with a letter
			if (!char.IsLetter(identifier[0]))
			{
				identifier = "Enum" + identifier;
			}

			return identifier;
		}

		public static void GenerateEnumScript(IEnumerable<string> names, string enumName, string scriptFileName)
		{
			if (names == null)
			{
				throw new ArgumentNullException(nameof(names));
			}

			using (System.IO.StreamWriter file = new System.IO.StreamWriter(scriptFileName))
			{
				string indent = "    ";

				file.WriteLine("namespace Mosaic.Toolset.Enums");
				file.WriteLine("{");

				file.WriteLine(indent + "public enum " + enumName);
				file.WriteLine(indent + "{");

				var uniqueNames = new HashSet<string>();

				foreach (var name in names)
				{
					if (uniqueNames.Add(name))
					{
						file.WriteLine(indent + indent + SanitizeEnumIdentifier(name) + ",");
					}
				}

				file.WriteLine(indent + "}");
				file.WriteLine("}");
			}
		}
	}
}